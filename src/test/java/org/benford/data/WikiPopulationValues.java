package org.benford.data;

import org.junit.jupiter.api.Assertions;

public class WikiPopulationValues implements TestValues {

  private static final double PERCENTAGE_DELTA = 0.001;

  private static final double[] EXPECTED_DIGIT_DISTRIBUTION = new double[]{
          0.0,
          0.298,
          0.149,
          0.128,
          0.099,
          0.112,
          0.078,
          0.037,
          0.049,
          0.045
  };

  private static final double[] VALUES = new double[]{
          1_402_727_120,
          1_362_469_440,
          329_719_893,
          266_911_900,
          220_892_331,
          211_548_537,
          206_139_587,
          168_641_968,
          146_745_098,
          126_577_691,
          125_960_000,
          108_650_241,
          100_403_464,
          98_665_000,
          96_208_984,
          89_561_404,
          83_462_017,
          83_154_997,
          83_149_300,
          67_075_000,
          66_796_807,
          66_507_205,
          60_238_522,
          58_775_022,
          57_637_628,
          54_817_919,
          51_780_579,
          49_395_678,
          47_564_296,
          47_100_396,
          44_938_712,
          43_000_000,
          42_519_620,
          41_830_619,
          41_590_300,
          40_150_200,
          38_379_000,
          38_035_239,
          35_902_989,
          34_218_169,
          34_192_976,
          32_785_760,
          32_225_560,
          32_219_521,
          32_131_400,
          31_127_674,
          30_280_811,
          30_066_648,
          29_996_478,
          29_825_968,
          26_545_864,
          26_251_309,
          25_823_071,
          25_714_709,
          25_450_000,
          23_596_493,
          22_314_743,
          21_803_000,
          21_510_181,
          20_250_833,
          19_405_156,
          19_129_952,
          19_107_216,
          18_704_040,
          17_885_422,
          17_500_657,
          17_489_172,
          17_467_831,
          16_705_608,
          16_604_026,
          16_244_513,
          15_893_219,
          15_288_489,
          15_159_624,
          12_778_250,
          12_374_397,
          12_218_357,
          11_733_059,
          11_722_038,
          11_577_779,
          11_534_131,
          11_469_896,
          11_209_628,
          10_953_317,
          10_724_599,
          10_693_939,
          10_684_148,
          10_358_320,
          10_343_403,
          10_276_617,
          10_067_108,
          9_890_400,
          9_769_000,
          9_397_800,
          9_198_950,
          9_158_345,
          9_127_000,
          8_935_000,
          8_902_600,
          8_603_899,
          7_901_454,
          7_538_000,
          7_500_700,
          7_252_672,
          7_123_205,
          6_963_764,
          6_951_482,
          6_871_287,
          6_825_442,
          6_533_500,
          6_486_201,
          6_460_411,
          6_031_187,
          5_824_857,
          5_703_600,
          5_518_092,
          5_528_390,
          5_496_011,
          5_457_873,
          5_367_580,
          5_058_007,
          5_005_542,
          4_976_684,
          4_921_500,
          4_664_790,
          4_475_353,
          4_420_110,
          4_218_808,
          4_077_347,
          4_076_246,
          3_716_858,
          3_518_552,
          3_497_117,
          3_318_458,
          3_301_000,
          3_193_694,
          2_956_900,
          2_845_955,
          2_795_484,
          2_793_271,
          2_726_667,
          2_681_735,
          2_458_936,
          2_347_706,
          2_338_851,
          2_172_579,
          2_095_861,
          2_077_132,
          2_007_201,
          1_904_600,
          1_795_666,
          1_604_528,
          1_543_300,
          1_454_789,
          1_387_149,
          1_363_985,
          1_328_976,
          1_265_475,
          1_093_238,
          1_078_373,
          884_887,
          875_900,
          873_724,
          782_766,
          741_672,
          696_100,
          680_806,
          626_108,
          622_359,
          582_463,
          581_372,
          550_483,
          493_559,
          469_000,
          459_500,
          408_487,
          385_340,
          374_775,
          366_130,
          351_965,
          304_500,
          287_025,
          275_918,
          271_407,
          244_832,
          210_240,
          200_874,
          178_696,
          172_400,
          156_223,
          148_000,
          120_100,
          112_190,
          112_003,
          110_608,
          106_800,
          104_578,
          104_468,
          100_651,
          98_055,
          96_453,
          83_314,
          77_543,
          71_808,
          65_813,
          64_027,
          63_196,
          56_700,
          56_081,
          56_200,
          55_500,
          53_532,
          52_823,
          52_428,
          42_953,
          40_614,
          38_749,
          38_100,
          35_334,
          33_691,
          33_553,
          30_030,
          29_914,
          17_900,
          15_200,
          14_869,
          11_700,
          11_000,
          10_200,
          9_961,
          5_997,
          5_633,
          4_989,
          3_198,
          1_955,
          1_735,
          1_520,
          1_400,
          825,
          555,
          50
  };

  private static final double[] EXPECTED_VALUES = new double[]{
          0,
          72,
          36,
          31,
          24,
          27,
          19,
          9,
          12,
          11
  };

  @Override
  public double[] getValues() {
    double[] values = calcValues(VALUES);
    Assertions.assertArrayEquals(EXPECTED_VALUES, values);
    return values;
  }

  @Override
  public double[] getExpectedZScore() {
    throw new RuntimeException("Not implemented");
  }

  @Override
  public double[] getExpectedDigitDistribution() {
    return EXPECTED_DIGIT_DISTRIBUTION;
  }

  @Override
  public double getPercentageDelta() {
    return PERCENTAGE_DELTA;
  }

  @Override
  public double getZScoreDelta() {
    throw new RuntimeException("Not implemented");
  }

  private double[] calcValues(double[] values) {
    double[] digit = new double[10];

    for (double d: values) {
      int firstDigit = Integer.parseInt(Double.toString(d).substring(0, 1));
      digit[firstDigit]++;
    }

    return digit;
  }
}
